---
interface Apartment {
  id: string;
  title: string;
  price: string;
  size?: number;
  rooms?: number;
  floor?: string;
  address?: string;
  status: string;
  building?: string;
  svgId?: string;
}

interface Props {
  apartments: Apartment[];
  buildingTitle?: string;
  buildingAddress?: string;
}

const {
  apartments,
  buildingTitle = "Wohnüberbauung",
  buildingAddress = "Bielstrasse 50/50a, Lengnau",
} = Astro.props;
---

<div
  class="flex flex-col lg:flex-row bg-white overflow-visible w-full max-w-full"
  id="apartments"
>
  <div class="lg:flex-[2] lg:max-w-[70%] p-6 md:p-10">
    <div class="mb-10 pb-6">
      <h2 class="text-3xl text-gray-800 mb-2 font-playfair font-semibold">
        {buildingTitle}
      </h2>
      <p class="text-gray-600 font-light tracking-wide">{buildingAddress}</p>
      <div class="flex flex-col md:flex-row gap-4 mt-6">
        <button
          class="py-2 px-4 bg-transparent border border-gold/20 text-gray-800 text-sm font-medium transition-all duration-300 hover:border-gold hover:bg-gold/5 building-tab active"
          data-building="all">Alle Wohnungen</button
        >
        <button
          class="py-2 px-4 bg-transparent border border-gold/20 text-gray-800 text-sm font-medium transition-all duration-300 hover:border-gold hover:bg-gold/5 building-tab"
          data-building="50">Bielstrasse 50</button
        >
        <button
          class="py-2 px-4 bg-transparent border border-gold/20 text-gray-800 text-sm font-medium transition-all duration-300 hover:border-gold hover:bg-gold/5 building-tab"
          data-building="50a">Bielstrasse 50a</button
        >
      </div>
    </div>

    <div class="flex flex-col gap-6 apartments-list">
      {
        apartments.map((apt) => (
          <div
            class="p-6 transition-all duration-300 bg-white relative apartment-box hover:shadow-md hover:-translate-y-1"
            data-apartment-id={apt.id}
            data-building={
              apt.building || (apt.address?.includes("50a,") ? "50a" : "50")
            }
          >
            <div class="absolute top-0 left-0 right-0 h-[1px] bg-gray-100 " />
            <div class="flex justify-between items-center mb-5">
              <h3 class="text-xl m-0 text-gray-800 font-playfair font-semibold">
                {apt.title}
              </h3>
              <div
                class={`py-1 px-3 text-xs font-medium uppercase tracking-wider ${
                  apt.status === "Verfügbar"
                    ? "bg-green-100 text-green-600"
                    : apt.status === "Reserviert"
                      ? "bg-orange-100 text-orange-600"
                      : "bg-red-100 text-red-600"
                }`}
                data-status={apt.status}
              >
                {apt.status}
              </div>
            </div>

            <div class="flex flex-col md:flex-row md:items-center md:justify-between mb-4">
              <p class="text-xl font-semibold text-gold mb-3 md:mb-0">
                {apt.price}
              </p>

              {(apt.size || apt.rooms || apt.floor) && (
                <div class="flex flex-col md:flex-row gap-3 md:gap-8">
                  {apt.size && (
                    <div class="flex items-center gap-2 text-gray-600 text-sm">
                      <svg
                        class="text-gold"
                        width="20"
                        height="20"
                        viewBox="0 0 24 24"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M4 21V8L12 4L20 8V21M4 21H20M4 21H2M20 21H22M8 10H16M8 14H16M8 18H16"
                          stroke="currentColor"
                          stroke-width="2"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                        />
                      </svg>
                      <span class="font-medium text-gray-800">{apt.size}</span>
                      <span>
                        m<sup>2</sup>
                      </span>
                    </div>
                  )}

                  {apt.rooms && (
                    <div class="flex items-center gap-2 text-gray-600 text-sm">
                      <svg
                        class="text-gold"
                        width="20"
                        height="20"
                        viewBox="0 0 24 24"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M3 21V12.7M3 12.7L12 5.7L21 12.7M3 12.7V8.7L12 1.7L21 8.7V12.7M21 21V12.7M6 21V15.7C6 15.7 6 14.7 7 14.7H17C18 14.7 18 15.7 18 15.7V21"
                          stroke="currentColor"
                          stroke-width="2"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                        />
                      </svg>
                      <span class="font-medium text-gray-800">{apt.rooms}</span>
                      <span>Zimmer</span>
                    </div>
                  )}

                  {apt.floor && (
                    <div class="flex items-center gap-2 text-gray-600 text-sm">
                      <svg
                        class="text-gold"
                        width="20"
                        height="20"
                        viewBox="0 0 24 24"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M3 5V19M21 5V19M21 19H3M21 5H3M6 9H8M6 13H8M6 17H8M16 9H18M16 13H18M16 17H18M11 9H13M11 13H13M11 17H13"
                          stroke="currentColor"
                          stroke-width="2"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                        />
                      </svg>
                      <span class="font-medium text-gray-800">{apt.floor}</span>
                    </div>
                  )}
                </div>
              )}
            </div>

            <div class="flex justify-between items-center mt-5 pt-4">
              {apt.address && (
                <p class="text-gray-600 mb-0 text-sm font-light">
                  {apt.address}
                </p>
              )}

              <a
                href={`/wohnungen/${apt.title.toLowerCase().replace(/\s+/g, "-")}`}
                class="inline-flex items-center gap-2 text-gold no-underline font-medium transition-all duration-300 text-sm uppercase tracking-wider hover:text-gold-dark"
              >
                Details ansehen
                <svg
                  class="transform transition-transform duration-300 group-hover:translate-x-1"
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    d="M14 5L21 12M21 12L14 19M21 12H3"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  />
                </svg>
              </a>
            </div>
          </div>
        ))
      }
    </div>
  </div>

  <div
    class="lg:flex-1 bg-white h-[calc(100vh-100px)] min-h-[550px] max-h-[700px] sticky top-5 self-start"
  >
    <div class="w-full h-full flex items-center justify-center pt-16">
      <object
        data="/images/house.svg"
        type="image/svg+xml"
        class="w-full h-full"
        id="buildingSvg"
        aria-label="Building floor plan"></object>
    </div>
  </div>
</div>

<script define:vars={{ apartments }}>
  // Script for apartment hover effects and building filtering
  document.addEventListener("DOMContentLoaded", () => {
    // Select all apartment info boxes and building tabs
    const apartmentBoxes = document.querySelectorAll(".apartment-box");
    const buildingTabs = document.querySelectorAll(".building-tab");
    let activeBuilding = "all";

    // Set up building tab functionality
    buildingTabs.forEach((tab) => {
      tab.addEventListener("click", () => {
        // Remove active class from all tabs
        buildingTabs.forEach((t) =>
          t.classList.remove("active", "bg-gold", "text-white", "border-gold"),
        );
        buildingTabs.forEach((t) =>
          t.classList.add("bg-transparent", "text-gray-800"),
        );

        // Add active class to clicked tab
        tab.classList.add("active", "bg-gold", "text-white", "border-gold");
        tab.classList.remove("bg-transparent", "text-gray-800");

        // Get building to filter by
        activeBuilding = tab.getAttribute("data-building");

        // Show/hide apartment boxes based on building
        apartmentBoxes.forEach((box) => {
          const building = box.getAttribute("data-building");

          if (activeBuilding === "all" || building === activeBuilding) {
            box.style.display = "";
          } else {
            box.style.display = "none";
          }
        });
      });
    });

    // Initial state - set first tab active
    if (buildingTabs.length > 0) {
      buildingTabs[0].classList.add("bg-gold", "text-white", "border-gold");
      buildingTabs[0].classList.remove("bg-transparent", "text-gray-800");
    }

    // Wait for the SVG to load and then set up the interactions
    const svgImage = document.getElementById("buildingSvg");

    svgImage.addEventListener("load", () => {
      // Get the SVG document
      const svgDoc = svgImage.contentDocument;
      if (!svgDoc) {
        console.error("Could not access SVG document");
        return;
      }

      // Select all g elements within the SVG
      const svgGroups = Array.from(svgDoc.querySelectorAll("g[id]"));

      console.log("SVG Groups found:", svgGroups.length);

      if (svgGroups.length === 0) {
        console.warn("No SVG groups found with IDs");
      }

      // Map apartment IDs to SVG group IDs using the improved approach
      const apartmentMap = {};

      // First try to map using the svgId property
      apartments.forEach((apt) => {
        if (apt.svgId) {
          // Try to find an SVG group with this ID
          const svgGroup = svgDoc.getElementById(apt.svgId);

          if (svgGroup) {
            apartmentMap[apt.id] = apt.svgId;
            console.log(
              `Mapped apartment ${apt.id} to SVG group ${apt.svgId} (by svgId)`,
            );
          }
        }
      });

      // If svgId didn't work, try the building+number approach
      apartments.forEach((apt) => {
        if (!apartmentMap[apt.id]) {
          const aptBuilding =
            apt.building || (apt.address?.includes("50a") ? "50a" : "50");
          const aptNumber = apt.id.replace(/\D/g, "");

          // Try different ID formats
          const potentialIds = [
            `apt-${aptBuilding}-${aptNumber}`,
            `apartment-${aptBuilding}-${aptNumber}`,
            `wohnung-${aptBuilding}-${aptNumber}`,
            `apt${aptNumber}`,
            `apartment${aptNumber}`,
            `wohnung${aptNumber}`,
          ];

          // Try to find an SVG group with any of these IDs
          for (const potentialId of potentialIds) {
            const svgGroup = svgDoc.getElementById(potentialId);

            if (svgGroup) {
              apartmentMap[apt.id] = potentialId;
              console.log(
                `Mapped apartment ${apt.id} to SVG group ${potentialId} (by building+number)`,
              );
              break;
            }
          }
        }
      });

      // If still not all apartments mapped, try matching by building and sequential index
      const building50Apts = apartments.filter(
        (apt) => apt.building === "50" || apt.address?.includes("50,"),
      );

      const building50aSvgGroups = svgGroups.filter(
        (g) => g.id.includes("50a") || g.id.includes("right"),
      );

      const building50SvgGroups = svgGroups.filter(
        (g) =>
          (g.id.includes("50") && !g.id.includes("50a")) ||
          g.id.includes("left"),
      );

      // Map building 50 apartments that don't have a mapping yet
      building50Apts.forEach((apt, index) => {
        if (!apartmentMap[apt.id] && index < building50SvgGroups.length) {
          apartmentMap[apt.id] = building50SvgGroups[index].id;
          console.log(
            `Mapped apartment ${apt.id} to SVG group ${building50SvgGroups[index].id} (by building position)`,
          );
        }
      });

      // Map building 50a apartments that don't have a mapping yet
      const building50aApts = apartments.filter(
        (apt) => apt.building === "50a" || apt.address?.includes("50a,"),
      );

      building50aApts.forEach((apt, index) => {
        if (!apartmentMap[apt.id] && index < building50aSvgGroups.length) {
          apartmentMap[apt.id] = building50aSvgGroups[index].id;
          console.log(
            `Mapped apartment ${apt.id} to SVG group ${building50aSvgGroups[index].id} (by building position)`,
          );
        }
      });

      // Last resort: match any remaining apartments sequentially
      apartments.forEach((apt, index) => {
        if (!apartmentMap[apt.id] && index < svgGroups.length) {
          apartmentMap[apt.id] = svgGroups[index].id;
          console.log(
            `Mapped apartment ${apt.id} to SVG group ${svgGroups[index].id} (sequential fallback)`,
          );
        }
      });

      // Ensure all apartment boxes have proper hover effects
      apartmentBoxes.forEach((box) => {
        box.addEventListener("mouseenter", () => {
          const apartmentId = box.getAttribute("data-apartment-id");
          const svgGroupId = apartmentMap[apartmentId];

          console.log(
            `Mouse enter on ${apartmentId}, looking for SVG group ${svgGroupId}`,
          );

          if (svgGroupId) {
            const svgGroup = svgDoc.getElementById(svgGroupId);
            if (svgGroup) {
              // First, store the original fill values to restore them later
              svgGroup.dataset.originalFill =
                svgGroup.getAttribute("fill") || "";

              // Get all polygons inside the group
              const polygons = svgGroup.querySelectorAll("polygon");

              // Store original styles and apply gold fill to each polygon
              polygons.forEach((polygon) => {
                // Store original style to restore later
                polygon.dataset.originalStyle =
                  polygon.getAttribute("style") || "";

                // Override the style attribute with gold fill - keeping other properties
                const currentStyle = polygon.getAttribute("style") || "";
                const newStyle =
                  currentStyle.replace(/fill:[^;]+;/, "") +
                  "fill: #c9a654 !important;";
                polygon.setAttribute("style", newStyle);
              });

              console.log(
                `Applied gold fill to SVG group ${svgGroupId} (${polygons.length} polygons)`,
              );
            } else {
              console.warn(`SVG group with ID ${svgGroupId} not found`);
            }
          } else {
            console.warn(`No mapping found for apartment ${apartmentId}`);
          }

          // Add active class to the hovered box
          box.classList.add(
            "active",
            "shadow-lg",
            "-translate-y-1.5",
            "border-gold/30",
          );
          // Add height to the left gold bar
          box.classList.add("before:h-full");
        });

        box.addEventListener("mouseleave", () => {
          const apartmentId = box.getAttribute("data-apartment-id");
          const svgGroupId = apartmentMap[apartmentId];

          if (svgGroupId) {
            const svgGroup = svgDoc.getElementById(svgGroupId);
            if (svgGroup) {
              // Restore original fills to all polygons
              const polygons = svgGroup.querySelectorAll("polygon");
              polygons.forEach((polygon) => {
                // Restore the original style
                if (polygon.dataset.originalStyle) {
                  polygon.setAttribute("style", polygon.dataset.originalStyle);
                  delete polygon.dataset.originalStyle;
                }
              });

              // Restore original group fill if it was set
              if (svgGroup.dataset.originalFill) {
                svgGroup.setAttribute("fill", svgGroup.dataset.originalFill);
                delete svgGroup.dataset.originalFill;
              }
            }
          }

          // Remove active class
          box.classList.remove(
            "active",
            "shadow-lg",
            "-translate-y-1.5",
            "border-gold/30",
          );
          // Remove height from the left gold bar
          box.classList.remove("before:h-full");
        });
      });

      // Add hover effects to SVG groups
      svgGroups.forEach((svgGroup) => {
        svgGroup.style.cursor = "pointer";
        svgGroup.style.transition = "all 0.3s ease";

        svgGroup.addEventListener("mouseenter", () => {
          const groupId = svgGroup.id;
          let apartmentId = null;

          // Find the corresponding apartment ID
          for (const [aptId, svgId] of Object.entries(apartmentMap)) {
            if (svgId === groupId) {
              apartmentId = aptId;
              break;
            }
          }

          if (apartmentId) {
            // Find and highlight the corresponding apartment box
            apartmentBoxes.forEach((box) => {
              if (box.getAttribute("data-apartment-id") === apartmentId) {
                box.classList.add(
                  "active",
                  "shadow-lg",
                  "-translate-y-1.5",
                  "border-gold/30",
                );
                box.classList.add("before:h-full");
                // Scroll apartment into view if needed
                const boxRect = box.getBoundingClientRect();
                const isInView =
                  boxRect.top >= 0 &&
                  boxRect.left >= 0 &&
                  boxRect.bottom <= window.innerHeight &&
                  boxRect.right <= window.innerWidth;

                if (!isInView) {
                  box.scrollIntoView({ behavior: "smooth", block: "nearest" });
                }
              }
            });
          }

          // Apply the same gold fill effect as when hovering over apartment boxes
          const polygons = svgGroup.querySelectorAll("polygon");
          polygons.forEach((polygon) => {
            // Store original style to restore later
            polygon.dataset.originalStyle = polygon.getAttribute("style") || "";

            // Override the style attribute with gold fill - keeping other properties
            const currentStyle = polygon.getAttribute("style") || "";
            const newStyle =
              currentStyle.replace(/fill:[^;]+;/, "") +
              "fill: #c9a654 !important;";
            polygon.setAttribute("style", newStyle);
          });

          console.log(
            `Applied gold fill to SVG group ${groupId} on mouseenter (${polygons.length} polygons)`,
          );
        });

        svgGroup.addEventListener("mouseleave", () => {
          const groupId = svgGroup.id;
          let apartmentId = null;

          // Find the corresponding apartment ID
          for (const [aptId, svgId] of Object.entries(apartmentMap)) {
            if (svgId === groupId) {
              apartmentId = aptId;
              break;
            }
          }

          if (apartmentId) {
            // Reset the highlight on the apartment box
            apartmentBoxes.forEach((box) => {
              if (box.getAttribute("data-apartment-id") === apartmentId) {
                box.classList.remove(
                  "active",
                  "shadow-lg",
                  "-translate-y-1.5",
                  "border-gold/30",
                );
                box.classList.remove("before:h-full");
              }
            });
          }

          // Restore original styles to all polygons
          const polygons = svgGroup.querySelectorAll("polygon");
          polygons.forEach((polygon) => {
            // Restore the original style
            if (polygon.dataset.originalStyle) {
              polygon.setAttribute("style", polygon.dataset.originalStyle);
              delete polygon.dataset.originalStyle;
            }
          });
        });
      });
    });
  });
</script>
